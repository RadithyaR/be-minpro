generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int           @id @default(autoincrement())
  email               String        @unique
  password            String
  fullName            String
  roleId              Int
  createdAt           DateTime      @default(now())
  bio                 String?
  isVerified          Boolean       @default(false)
  phone               String?
  profilePicture      String?
  resetPasswordExpiry DateTime?
  resetPasswordToken  String?
  updatedAt           DateTime      @default(now()) @updatedAt
  verificationToken   String?
  points              Point[]
  coupons             Coupon[]
  events              Event[]       @relation("UserEvents")
  referrals           Referral?
  reviews             Review[]
  transactions        Transaction[]
  role                Role          @relation(fields: [roleId], references: [id])
  vouchers            Voucher[]

  @@map("users")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]

  @@map("roles")
}

model Event {
  id             Int           @id @default(autoincrement())
  userId         Int
  name           String
  description    String
  eventImage     String?
  price          Int
  startDate      DateTime
  endDate        DateTime
  availableSeats Int
  createdAt      DateTime      @default(now())
  address        String?
  city           String?
  link           String?
  locationType   LocationType
  user           User          @relation("UserEvents", fields: [userId], references: [id])
  reviews        Review[]
  transactions   Transaction[]
  vouchers       Voucher[]

  @@map("events")
}

model Transaction {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])

  eventId    Int
  event      Event     @relation(fields: [eventId], references: [id])

  quantity   Int       @default(1)     // minimal 1 tiket
  baseAmount Int                       // harga tiket Ã— quantity

  discountCoupon  Int?  @default(0)
  discountVoucher Int?  @default(0)
  discountPoint   Int?  @default(0)
  finalAmount     Int                 // baseAmount - diskon total
  
  voucherId      Int?          
  voucher        Voucher?       @relation(fields: [voucherId], references: [id])

  points        Point[]
  coupons       Coupon[]

  paymentProof   String?              // path/url bukti bayar
  statusId       Int
  status         PaymentStatus @relation(fields: [statusId], references: [id])

  createdAt DateTime  @default(now())

  @@map("transactions")
}

model PaymentStatus {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  transactions Transaction[]

  @@map("payment_status")
}

model Voucher {
  id           Int           @id @default(autoincrement())
  userId       Int
  eventId      Int
  nominal      Int
  isUsed       Boolean       @default(false)
  quota        Int           @default(1)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  event        Event         @relation(fields: [eventId], references: [id])
  user         User          @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@map("vouchers")
}

model Point {
  id            Int          @id @default(autoincrement())
  userId        Int
  transactionId Int?
  amount        Int
  type          PointType
  source        String?
  expiredAt     DateTime?
  remaining     Int?
  createdAt     DateTime     @default(now())
  description   String?
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
}

model Coupon {
  id            Int          @id @default(autoincrement())
  userId        Int
  nominal       Int
  expiredAt     DateTime
  isUsed        Boolean      @default(false)
  transactionId Int?
  createdAt     DateTime     @default(now())
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@map("coupons")
}

model Referral {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  code      String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("referrals")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

enum LocationType {
  online
  offline
}

enum PointType {
  EARNED
  USED
  EXPIRED
  BONUS
}
